/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.citd.UI;

import com.citd.DAO.KhoaHocDAO;
import com.citd.DAO.NhanVienDAO;
import com.citd.DAO.ThongKeDAO;
import com.citd.Entity.KhoaHoc;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.PrintWriter;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.citd.uitls.Auth;
import com.citd.uitls.HeaderColor;
import com.citd.uitls.MsgBox;
import com.citd.uitls.XDate;
import com.citd.uitls.XImage;
import java.io.FileOutputStream;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class ThongKeJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ThongKeFrame
     */
    public ThongKeJFrame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBackGround = new javax.swing.JPanel();
        lblTieuDe = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        pnlBangDiem = new javax.swing.JPanel();
        lblKhoaHoc = new javax.swing.JLabel();
        cboKhoaHoc = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBangDiem = new javax.swing.JTable();
        btnLuuFile = new javax.swing.JButton();
        btnGuiFile = new javax.swing.JButton();
        btnLuuExcel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNguoiHoc = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDiemChuyenDe = new javax.swing.JTable();
        pnlDoanhThu = new javax.swing.JPanel();
        lblNam = new javax.swing.JLabel();
        cboNam = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblDoanhThu = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TỔNG HỢP THỐNG KÊ");

        pnlBackGround.setBackground(new java.awt.Color(255, 255, 255));

        lblTieuDe.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTieuDe.setForeground(new java.awt.Color(255, 0, 255));
        lblTieuDe.setText("TỔNG HỢP THỐNG KÊ");

        tabs.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N

        pnlBangDiem.setBackground(new java.awt.Color(255, 204, 255));

        lblKhoaHoc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblKhoaHoc.setText("KHÓA HỌC:");

        cboKhoaHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKhoaHocActionPerformed(evt);
            }
        });

        tblBangDiem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tblBangDiem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã NH", "Họ và tên", "Điểm", "Xếp Loại"
            }
        ));
        tblBangDiem.setFocusable(false);
        tblBangDiem.setRowHeight(40);
        tblBangDiem.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tblBangDiem.setSelectionForeground(new java.awt.Color(255, 255, 153));
        tblBangDiem.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblBangDiem);

        btnLuuFile.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnLuuFile.setText("Lưu File");
        btnLuuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuFileActionPerformed(evt);
            }
        });

        btnGuiFile.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnGuiFile.setText("Gửi File");
        btnGuiFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuiFileActionPerformed(evt);
            }
        });

        btnLuuExcel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnLuuExcel.setText("Excel");
        btnLuuExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBangDiemLayout = new javax.swing.GroupLayout(pnlBangDiem);
        pnlBangDiem.setLayout(pnlBangDiemLayout);
        pnlBangDiemLayout.setHorizontalGroup(
            pnlBangDiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBangDiemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBangDiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                    .addGroup(pnlBangDiemLayout.createSequentialGroup()
                        .addComponent(lblKhoaHoc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboKhoaHoc, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLuuFile)
                        .addGap(18, 18, 18)
                        .addComponent(btnGuiFile)
                        .addGap(18, 18, 18)
                        .addComponent(btnLuuExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlBangDiemLayout.setVerticalGroup(
            pnlBangDiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBangDiemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBangDiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKhoaHoc)
                    .addComponent(cboKhoaHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLuuFile)
                    .addComponent(btnGuiFile)
                    .addComponent(btnLuuExcel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Bảng điểm", new javax.swing.ImageIcon(getClass().getResource("/com/citd/Image/BangDiemIcon.png")), pnlBangDiem); // NOI18N

        tblNguoiHoc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tblNguoiHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Năm", "Số NH", "ĐK Sớm nhất", "ĐK Muộn nhất"
            }
        ));
        tblNguoiHoc.setFocusable(false);
        tblNguoiHoc.setRowHeight(40);
        tblNguoiHoc.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tblNguoiHoc.setSelectionForeground(new java.awt.Color(255, 255, 153));
        tblNguoiHoc.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblNguoiHoc);

        tabs.addTab("Người học", new javax.swing.ImageIcon(getClass().getResource("/com/citd/Image/NguoiHocIcon.png")), jScrollPane2); // NOI18N

        tblDiemChuyenDe.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tblDiemChuyenDe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Chuyên đề", "SLHV", "Điểm TN", "Điểm CN", "Điểm TB"
            }
        ));
        tblDiemChuyenDe.setFocusable(false);
        tblDiemChuyenDe.setRowHeight(40);
        tblDiemChuyenDe.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tblDiemChuyenDe.setSelectionForeground(new java.awt.Color(255, 255, 153));
        tblDiemChuyenDe.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblDiemChuyenDe);

        tabs.addTab("Điểm chuyền đề", new javax.swing.ImageIcon(getClass().getResource("/com/citd/Image/DiemChuyenDeIcon.png")), jScrollPane3); // NOI18N

        pnlDoanhThu.setBackground(new java.awt.Color(255, 204, 255));

        lblNam.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblNam.setText("Năm:");

        cboNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNamActionPerformed(evt);
            }
        });

        tblDoanhThu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tblDoanhThu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Chuyên đề", "Số KH", "Số HV", "D.T", "HP Thấp Nhất", "HP Cao Nhất", "HP Trung Bình"
            }
        ));
        tblDoanhThu.setFocusable(false);
        tblDoanhThu.setRowHeight(40);
        tblDoanhThu.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tblDoanhThu.setSelectionForeground(new java.awt.Color(255, 255, 153));
        jScrollPane4.setViewportView(tblDoanhThu);

        javax.swing.GroupLayout pnlDoanhThuLayout = new javax.swing.GroupLayout(pnlDoanhThu);
        pnlDoanhThu.setLayout(pnlDoanhThuLayout);
        pnlDoanhThuLayout.setHorizontalGroup(
            pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoanhThuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                    .addGroup(pnlDoanhThuLayout.createSequentialGroup()
                        .addComponent(lblNam)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboNam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlDoanhThuLayout.setVerticalGroup(
            pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoanhThuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNam)
                    .addComponent(cboNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Doanh Thu", new javax.swing.ImageIcon(getClass().getResource("/com/citd/Image/DoanhThuIcon.png")), pnlDoanhThu); // NOI18N

        javax.swing.GroupLayout pnlBackGroundLayout = new javax.swing.GroupLayout(pnlBackGround);
        pnlBackGround.setLayout(pnlBackGroundLayout);
        pnlBackGroundLayout.setHorizontalGroup(
            pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addGroup(pnlBackGroundLayout.createSequentialGroup()
                        .addComponent(lblTieuDe)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlBackGroundLayout.setVerticalGroup(
            pnlBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTieuDe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackGround, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboKhoaHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoaHocActionPerformed
        // TODO add your handling code here:
        fillTableBangDiem();
    }//GEN-LAST:event_cboKhoaHocActionPerformed

    private void cboNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamActionPerformed
        // TODO add your handling code here:
        fillTableDoanhThu();
    }//GEN-LAST:event_cboNamActionPerformed

    private void btnLuuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuFileActionPerformed
        //LuuFile();
        //LuuFileAll();
        int result = MsgBox.confirm2(this, "Bạn muốn lưu kiểu nào ?\n"
                                + "Yes - Lưu tất cả điểm Học Viên\n"
                                + "No - Lưu theo Bảng Điểm đang chọn\n"
                                + "Cancel - Hủy thao tác");
        if(result == 0){
            LuuFileAll();
        }else if(result == 1){
            LuuFile();
        }else{
            //Cancel
        }
    }//GEN-LAST:event_btnLuuFileActionPerformed

    private void btnGuiFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuiFileActionPerformed
        //GuiFile();
        //GuiTheoClick();
        int result = MsgBox.confirm2(this, "Bạn muốn gửi bằng cách chọn người học trên Table không ?\n"
                                + "Yes - Đồng ý\n"
                                + "No - Gửi bằng cách tự điền Email (Gửi File cho người Quản lí)\n"
                                + "Cancel - Hủy thao tác");
        if(result == 0){
            GuiTheoClick();
        }else if(result == 1){
            GuiFile();
        }else{
            //Cancel
        }
    }//GEN-LAST:event_btnGuiFileActionPerformed

    private void btnLuuExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuExcelActionPerformed
        // TODO add your handling code here:
        //XuatExcel();
        int result = MsgBox.confirm2(this, "Bạn muốn lưu (dạng Excel) toàn bộ hay theo khóa học ?\n"
                                + "Yes - Toàn Bộ\n"
                                + "No - Theo khóa học\n"
                                + "Cancel - Hủy thao tác");
        if(result == 0){
            XuatExcel();
        }else if(result == 1){
            XuatExcel2();
        }else{
            //Cancel
        }
    }//GEN-LAST:event_btnLuuExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThongKeJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuiFile;
    private javax.swing.JButton btnLuuExcel;
    private javax.swing.JButton btnLuuFile;
    private javax.swing.JComboBox<String> cboKhoaHoc;
    private javax.swing.JComboBox<String> cboNam;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblKhoaHoc;
    private javax.swing.JLabel lblNam;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JPanel pnlBackGround;
    private javax.swing.JPanel pnlBangDiem;
    private javax.swing.JPanel pnlDoanhThu;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblBangDiem;
    private javax.swing.JTable tblDiemChuyenDe;
    private javax.swing.JTable tblDoanhThu;
    private javax.swing.JTable tblNguoiHoc;
    // End of variables declaration//GEN-END:variables
    
    KhoaHocDAO khdao = new KhoaHocDAO();
    ThongKeDAO dao = new ThongKeDAO();
    public void selectTab(int index){
        tabs.setSelectedIndex(index);
    }

    private void init() {
        setLocationRelativeTo(null);
        this.setIconImage(XImage.getAppIcon());
        
        tblBangDiem.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblBangDiem.getParent().setBackground(Color.WHITE);
        tblBangDiem.getTableHeader().setPreferredSize(new Dimension(40, 40));
        tblBangDiem.getColumnModel().getColumn(0).setMaxWidth(75);
        tblBangDiem.getColumnModel().getColumn(1).setMinWidth(180);
        tblBangDiem.setAutoCreateRowSorter(true);
        
        tblNguoiHoc.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblNguoiHoc.getParent().setBackground(Color.WHITE);
        tblNguoiHoc.getTableHeader().setPreferredSize(new Dimension(40, 40));
        tblNguoiHoc.setAutoCreateRowSorter(true);
        
        tblDiemChuyenDe.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblDiemChuyenDe.getParent().setBackground(Color.WHITE);
        tblDiemChuyenDe.getTableHeader().setPreferredSize(new Dimension(40, 40));
        tblDiemChuyenDe.getColumnModel().getColumn(0).setMinWidth(220);
        tblDiemChuyenDe.setAutoCreateRowSorter(true);
        
        tblDoanhThu.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblDoanhThu.getParent().setBackground(Color.WHITE);
        tblDoanhThu.getTableHeader().setPreferredSize(new Dimension(40, 40));
        tblDoanhThu.getColumnModel().getColumn(0).setMinWidth(200);
        tblDoanhThu.getColumnModel().getColumn(1).setMaxWidth(53);
        tblDoanhThu.getColumnModel().getColumn(2).setMaxWidth(53);
        tblDoanhThu.getColumnModel().getColumn(3).setMaxWidth(60);
        tblDoanhThu.setAutoCreateRowSorter(true);
        
        fillComBoxKhoaHoc();
        fillTableBangDiem();
        fillTableLuongNguoiHoc();
        fillTableDiemChuyenDe();
        fillComboBoxNam();
        fillTableDoanhThu();
        this.selectTab(0);
//        if(!Auth.isManager()){
//            tabs.remove(3);
//        }
        
    }
    
    
    private void fillComBoxKhoaHoc(){
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboKhoaHoc.getModel();
        model.removeAllElements();
        List<KhoaHoc> list = khdao.selectAll();
        for(KhoaHoc kh : list){
            model.addElement(kh);
        }      
    }
    
    private void fillTableBangDiem(){
        DefaultTableModel model = (DefaultTableModel) tblBangDiem.getModel();
        model.setRowCount(0);
        KhoaHoc kh = (KhoaHoc) cboKhoaHoc.getSelectedItem();
        List<Object[]> list = dao.getBangDiem(kh.getMaKH());
        for(Object[] row : list){
            double diem = (double) row[2];
            model.addRow(new Object[]{row[0],row[1],diem,getXepLoai(diem)});
        }
    }
    
    private String getXepLoai(double diem){
        if(diem < 5){
            return "Chưa đạt";
        }
        if(diem < 6.5){
            return "Trung Bình";
        }
        if(diem < 7.5){
            return "Khá";
        }
        if(diem < 9){
            return "Giỏi";
        }
        return "Xuất sắc";
    }
    
    private void fillTableLuongNguoiHoc(){
        DefaultTableModel model = (DefaultTableModel) tblNguoiHoc.getModel();
        model.setRowCount(0);
        List<Object[]> list = dao.getLuongNguoiHoc();
        for(Object[] row : list){
            model.addRow(row);
        }
        
    }
    
    private void fillTableDiemChuyenDe(){
        DefaultTableModel model = (DefaultTableModel) tblDiemChuyenDe.getModel();
        model.setRowCount(0);
        List<Object[]> list = dao.getDiemChuyenDe();
        for(Object[] row : list){
            model.addRow(new Object[] {row[0], row[1], row[2], row[3], row[4]});
        }
        
    }
    
    private void fillComboBoxNam(){
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboNam.getModel();
        model.removeAllElements();;
        List<Integer> list = khdao.selectYears();
        for(Integer year : list){
            model.addElement(year);
        }
    }
    
    private void fillTableDoanhThu(){
        DefaultTableModel model  = (DefaultTableModel) tblDoanhThu.getModel();
        model.setRowCount(0);
        int nam = (Integer) cboNam.getSelectedItem();
        List<Object[]> list = dao.getDoanhThu(nam);
        for (Object[] row : list) {
            model.addRow(row);
        }               
    }

    private void LuuFile() {
        JFileChooser fileChooser = new JFileChooser();
        if(fileChooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
            File name = fileChooser.getSelectedFile();
            try {
                PrintWriter pw = new PrintWriter(name);
                String bangdiem = "";
                KhoaHoc kh = (KhoaHoc) cboKhoaHoc.getSelectedItem();
                bangdiem += "\n--- BẢNG ĐIỂM của Khóa Học: "+ kh.toString() +" ---\n";
                for(int i = 0; i < tblBangDiem.getRowCount(); i++){                    
                    bangdiem += "|---------------------------------------------\n";
                    bangdiem += "Mã Người Học: " + tblBangDiem.getValueAt(i, 0).toString() +  "\n";
                    bangdiem += "Họ và Tên: " + tblBangDiem.getValueAt(i, 1).toString() + "\n";
                    bangdiem += "Điểm: " + tblBangDiem.getValueAt(i, 2).toString() + "\n";
                    bangdiem += "Xếp Loại:  " +  tblBangDiem.getValueAt(i, 3).toString() + "\n";
                    bangdiem += "|---------------------------------------------\n\n";                   
                }
                pw.print(bangdiem);
                pw.close();
                MsgBox.alert(this, "Lưu thành công !");
            } catch (Exception e) {
                e.printStackTrace();
            }          
        }
    }
    private void LuuFileAll(){
        JFileChooser fileChooser = new JFileChooser();
        if(fileChooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
            File name = fileChooser.getSelectedFile();
            try {
                PrintWriter pw = new PrintWriter(name);
                String bangdiem = "";               
                List<Object[]> list = dao.getAllBangDiem();
                bangdiem += "\n--- BẢNG ĐIỂM ---\n";              
                for(Object[] row : list){
                    bangdiem += "|---------------------------------------------\n";
                    bangdiem += "Mã Người Học: " + row[0].toString() +  "\n";
                    bangdiem += "Họ và Tên: " + row[1].toString() + "\n";
                    bangdiem += "Điểm: " + row[2].toString() + "\n";
                    bangdiem += "Xếp Loại:  " +  getXepLoai((double) row[2]) + "\n";
                    bangdiem += "|---------------------------------------------\n\n";  
                }
                pw.print(bangdiem);
                pw.close();
                MsgBox.alert(this, "Lưu thành công !");
            } catch (Exception e) {
                e.printStackTrace();
            }          
        }
    }
    
    private String duongdan = "";
    private String duongdan2 = "";
    private void GuiFile() {
        JFileChooser fChooser = new JFileChooser();
        fChooser.setMultiSelectionEnabled(false);
        int selecttion = fChooser.showDialog(null,"Open File Lưu");
        
        if ( selecttion == fChooser.APPROVE_OPTION ){
            File fAttach = fChooser.getSelectedFile();           
            duongdan = fAttach.getPath();
            SendMail();
        }
        else
            duongdan = "";      
    }
    private void GuiTheoClick(){
        //Tao 1 ham send co 2 tham so
        //Truyen vao Mail, Thong Tin
        KhoaHoc kh = (KhoaHoc) cboKhoaHoc.getSelectedItem();
        for(int row : tblBangDiem.getSelectedRows()){
            SendMailClick(tblBangDiem.getValueAt(row, 0).toString(), kh.getMaKH());
        }
    }
    private void SendMailClick(String maNH, int maKH){
        try {
            Properties p = new Properties();
            p.put("mail.smtp.auth", "true");
            p.put("mail.smtp.starttls.enable", "true");
            p.put("mail.smtp.host", "smtp.gmail.com");
            p.put("mail.smtp.port", 587); 
            //-----
            final String accountName = "chanhvo654@gmail.com";
            final String accountPassword = "nwfi zkrv tiat rfvs";  
            Session s = Session.getInstance(p,
                    new javax.mail.Authenticator() {
                        protected PasswordAuthentication getPasswordAuthentication() {
                            //4.xac thuc tai khoan email cua ban va mat khau
                            return new PasswordAuthentication(accountName, accountPassword); 
                        }
                    });
            //--------
            List<Object[]> dstam = dao.getThongTin(maNH,maKH);
            String from = "chanhvo654@gmail.com";
            String to = "";
            for(Object[] row : dstam){
                to = row[4].toString();
                break;
            }           
            String subject = "BẢNG ĐIỂM";
            String body = "--- ĐIỂM CỦA BẠN ---";
            for(Object[] row : dstam){
                body += "Mã người học: " + row[0].toString() + "\n";
                body += "Họ tên: " + row[1].toString() + "\n";
                body += "Điểm của bạn: " + row[2].toString() + "\n";
                body += "Xếp Loại:  " +  getXepLoai((double) row[2]) + "\n";
            }
            Message msg = new MimeMessage(s);

            msg.setFrom(new InternetAddress(from));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            msg.setSubject(subject);
            msg.setText(body); 
            //-----------
            Transport.send(msg); 

            JOptionPane.showMessageDialog(null, "Đã gửi cho Mail: " + to , "Message", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (MessagingException ex) {
            Logger.getLogger(ThongKeJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void SendMail(){
        try {
            Properties p = new Properties();
            p.put("mail.smtp.auth", "true");
            p.put("mail.smtp.starttls.enable", "true");
            p.put("mail.smtp.host", "smtp.gmail.com");
            p.put("mail.smtp.port", 587);
            String accountName = "chanhvo654@gmail.com";
            String accountPassword = "nwfi zkrv tiat rfvs";
            Session s = Session.getInstance(p,
                    new javax.mail.Authenticator() {
                        protected PasswordAuthentication getPasswordAuthentication() {
                            return new PasswordAuthentication(accountName, accountPassword);
                        }});          
            String from = "chanhvo654@gmail.com";
            String to = MsgBox.prompt(this, "Nhập vào các Email cần gửi File: ");
            String subject = "BẢNG ĐIỂM";
            String body = "";
            String mailnhan = "";
            String[] temp = to.split(",");
            for(String ss :  temp){
                Message msg = new MimeMessage(s);
                msg.setFrom(new InternetAddress(from));
                msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(ss));
                msg.setSubject(subject);
                msg.setText(body);
                msg.setSentDate(new Date());

                MimeBodyPart textPart = new MimeBodyPart();
                textPart.setContent(body, "text/plain");
                Multipart mp = new MimeMultipart();
                mp.addBodyPart(textPart);
                String strAttach = duongdan.trim();
                if (!strAttach.equals("")) {
                    MimeBodyPart attachFilePart = new MimeBodyPart();
                    FileDataSource fds = new FileDataSource(strAttach);
                    attachFilePart.setDataHandler(new DataHandler(fds));
                    attachFilePart.setFileName(fds.getName());
                    mp.addBodyPart(attachFilePart);
                }
                msg.setContent(mp);
                Transport.send(msg);
                mailnhan = mailnhan + "- " + ss.trim() + "\n";
            }
            MsgBox.alert(this,"Các mail đã gửi thành công là: \n" + mailnhan);
            
        } catch (MessagingException ex) {
            Logger.getLogger(ThongKeJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void XuatExcel(){
        try {
            //XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Bảng Điểm");

            CellStyle cs = createStyleForHeader(spreadsheet);
            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH HỌC VIÊN");

            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("STT");
            
            cell = row.createCell(1, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Mã Người Học");
            
            cell = row.createCell(2, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Họ Tên");
            
            cell = row.createCell(3, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Điểm");
            
            cell = row.createCell(4, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Xếp Loại");


            

            List<Object[]> list = dao.getAllBangDiem();
            int stt = 0;
            for(Object[] rows:list){               
                row = spreadsheet.createRow((short) 4 + stt);
                row.setHeight((short) 400);               
                row.createCell(0).setCellValue(stt + 1);
                row.createCell(1).setCellValue(rows[0].toString());
                row.createCell(2).setCellValue(rows[1].toString());
                row.createCell(3).setCellValue(rows[2].toString());
                row.createCell(4).setCellValue(getXepLoai((double) rows[2]));
                stt++;
            }
            autosizeColumn(spreadsheet, 5);
            //FileOutputStream out = new FileOutputStream(new File("D:/hv.xlsx"));
            JFileChooser fc = new JFileChooser();
            if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File name = fc.getSelectedFile();
                FileOutputStream out = new FileOutputStream(name);
                workbook.write(out);
                out.close();
                MsgBox.alert(this, "Lưu Thành Công !");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lưu Thất Bại !");
        }
    }
    private void XuatExcel2(){
        try {
            //XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Bảng Điểm");

            CellStyle cs = createStyleForHeader(spreadsheet);
            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            KhoaHoc kh = (KhoaHoc) cboKhoaHoc.getSelectedItem();
            cell.setCellValue("DANH SÁCH HỌC VIÊN CỦA KHÓA HỌC: " + kh.getMaCD() + " " + "(" + XDate.toString(kh.getNgayKG(), "yyyy-MM-dd") + ")");

            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("STT");
            
            cell = row.createCell(1, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Mã Người Học");
            
            cell = row.createCell(2, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Họ Tên");
            
            cell = row.createCell(3, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Điểm");
            
            cell = row.createCell(4, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Xếp Loại");


            

            
            List<Object[]> list = dao.getBangDiem(kh.getMaKH());
            int stt = 0;
            for(Object[] rows:list){               
                row = spreadsheet.createRow((short) 4 + stt);
                row.setHeight((short) 400);               
                row.createCell(0).setCellValue(stt + 1);
                row.createCell(1).setCellValue(rows[0].toString());
                row.createCell(2).setCellValue(rows[1].toString());
                row.createCell(3).setCellValue(rows[2].toString());
                row.createCell(4).setCellValue(getXepLoai((double) rows[2]));
                stt++;
            }
            autosizeColumn(spreadsheet, 5);
            //FileOutputStream out = new FileOutputStream(new File("D:/hv.xlsx"));
            JFileChooser fc = new JFileChooser();
            if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File name = fc.getSelectedFile();
                FileOutputStream out = new FileOutputStream(name);
                workbook.write(out);
                out.close();
                MsgBox.alert(this, "Lưu Thành Công !");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lưu Thất Bại !");
        }
    }
    private void autosizeColumn(Sheet sheet, int lastColumn) {
        for (int columnIndex = 0; columnIndex < lastColumn; columnIndex++) {
            sheet.autoSizeColumn(columnIndex);
        }
    }
    private CellStyle createStyleForHeader(Sheet sheet) {
        // Create font
        Font font = sheet.getWorkbook().createFont();
        font.setFontName("Times New Roman"); 
        font.setBold(true);
        font.setFontHeightInPoints((short) 14); // font size
        font.setColor(IndexedColors.WHITE.getIndex()); // text color
 
        // Create CellStyle
        CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
        cellStyle.setFont(font);
        cellStyle.setFillForegroundColor(IndexedColors.BLACK.getIndex());
        cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        cellStyle.setBorderBottom(BorderStyle.THIN);
        return cellStyle;
    }
}
